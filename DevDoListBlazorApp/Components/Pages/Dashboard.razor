@page "/dashboard"
@rendermode InteractiveServer
@using DevDoListBlazorApp.Models
@using DevDoListBlazorApp.Services
@using DevDoListBlazorApp.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Collections.Generic
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="dashboard-page">
        <div class="dash-container">
            <div class="add-new-note" @onclick="HandleNew">
                @* <img src="@newNote" /> *@
            </div>
            <div class="card-container-dash">
                <div class="card-container-grid">
                    foreach (var data in usersNotes)
                    {
                        <DataCards Data="userNotes" CurCategory="All"/>
                    }
                </div>
                @if (!string.IsNullOrEmpty(errorNotes))
                {
                    <div class="error-message-notes">@errorNotes</div>
                }
            </div>
        </div>
</div>

@code {
    List<Note> usersNotes = new List<Note>();
    List<string> categories = new List<string>();
    string currentCategory = "All";
    string sortOrder = "asc"; // Default sort order is ascending
    string errorNotes = "";
    string errorCategories = "";
    bool showAscDesc = false;
    bool checkedLoggedIn = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) // Redirects to login page if they do not have a token
    {
        if (firstRender && !checkedLoggedIn)
        {
            // Check if the user is not logged in
            var jwtToken = await ProtectedSessionStorage.GetAsync<string>("accessToken");
            if (string.IsNullOrEmpty(jwtToken.Value))
            {
                // User is not logged in, redirect to login page
                NavigationManager.NavigateTo("/");
            }
            checkedLoggedIn = true;
        }

        // Fetch data on component initialization
        // FetchNotesData();
        // Fetch Categories Data - could hardcode
   
    }

    void HandleNew()
    {
        NavigationManager.NavigateTo("/NewNote");
    }

    void ToggleAscDesc()
    {
        showAscDesc = !showAscDesc;
        HandleSort();
    }

    void FetchNotesData()
    {
        errorNotes = "";
        // Fetch notes data
    }

    void FetchCategoriesData()
    {
        errorCategories = "";
        // Fetch categories data
    }

    void HandleSort()
    {
        sortOrder = sortOrder == "asc" ? "desc" : "asc";
        // Sort usersNotes based on sortOrder
        // Example: usersNotes = sortOrder == "asc" ? usersNotes.OrderBy(n => n.LastEdited).ToList() : usersNotes.OrderByDescending(n => n.LastEdited).ToList();
    }
}
