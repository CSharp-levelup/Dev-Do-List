@page "/dashboard"
@rendermode InteractiveServer
@using System.Collections.Generic
@using System.Linq
@using System

<div class="dashboard-page">
        <div class="dash-container">
            <div class="add-new-note" @onclick="HandleNew">
                @* <img src="@newNote" /> *@
            </div>
            <div class="card-container-dash">
                <div class="card-container-grid">
                    @* @foreach (var data in usersNotes)
                    {
                        <DataCards Data="@data" CurCategory="@currentCategory" />
                    } *@
                </div>
                @if (!string.IsNullOrEmpty(errorNotes))
                {
                    <div class="error-message-notes">@errorNotes</div>
                }
            </div>
        </div>
</div>

@code {
    // Server information
    // const string hostname = "localhost";
    // const int port = 8080;

    // General data
    List<Note> usersNotes = new List<Note>();
    List<string> categories = new List<string>();
    string currentCategory = "All";
    string sortOrder = "asc"; // Default sort order is ascending
    string errorNotes = "";
    string errorCategories = "";
    bool showAscDesc = false;

    // Navigation

    protected override void OnInitialized()
    {
        // Fetch data on component initialization
        @* FetchNotesData();
        FetchCategoriesData(); *@
    }

    void HandleNew()
    {
        @* navigate.NavigateTo("/NewNote"); *@
    }

    void ToggleAscDesc()
    {
        showAscDesc = !showAscDesc;
        HandleSort();
    }

    void FetchNotesData()
    {
        errorNotes = "";
        // Fetch notes data
        // Example: usersNotes = await httpClient.GetFromJsonAsync<List<Note>>("api/notes");
    }

    void FetchCategoriesData()
    {
        errorCategories = "";
        // Fetch categories data
        // Example: categories = await httpClient.GetFromJsonAsync<List<string>>("api/categories");
    }

    void HandleSort()
    {
        sortOrder = sortOrder == "asc" ? "desc" : "asc";
        // Sort usersNotes based on sortOrder
        // Example: usersNotes = sortOrder == "asc" ? usersNotes.OrderBy(n => n.LastEdited).ToList() : usersNotes.OrderByDescending(n => n.LastEdited).ToList();
    }
}

@code {
    // Define Note class
    public class Note
    {
        public string Title { get; set; }
        public DateTime LastEdited { get; set; }
        // Add other properties as needed
    }

    // Paths to image files
    @* string asc = "../assets/asc.svg";
    string desc = "../assets/desc.svg";
    string newNote = "../assets/new_note.svg"; *@
    // string logo = "../assets/logo_export.svg";
}
