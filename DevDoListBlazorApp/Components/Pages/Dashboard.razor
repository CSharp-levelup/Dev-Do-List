@page "/dashboard"
@using DevDoListBlazorApp.Models
@using DevDoListBlazorApp.Services
@using DevDoListBlazorApp.Components.Shared
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject NoteService noteService
@inject TaskTypeService taskTypeService


<div class="dash-container">
    <div class="add-new-note-container">
        <div class="categories-container">
            <div class="@GetButtonClass(allCategory)" @onclick="()=>HandleFilter(allCategory)">
                All
            </div>
            @foreach (var category in categories) {
                <div class="@GetButtonClass(allCategory)" @onclick="()=>HandleFilter(category)">
                    @category.taskTypeDescription
                </div>
            }
        </div>
        <img class="add-new-note" src="/assets/AddNewNote.svg" alt="AddNewNote" />
    </div>
    <div class="card-container-dash" @onclick="HandleNew">
        <DataCards userNote="usersNotes" CurCategory="All" />
    </div>
</div>


@code {
    List<Note> usersNotes = new List<Note>();
    List<TaskType> categories = new List<TaskType>();
    TaskType allCategory = new TaskType
    {
        taskTypeId = 0,
        taskTypeDescription = "All"
    };
    TaskType currentCategory = new TaskType
    {
        taskTypeId=0,
        taskTypeDescription="All"
    };
    string sortOrder = "asc";
    string errorNotes = "";
    string errorCategories = "";
    bool showAscDesc = false;
    bool checkedLoggedIn = false;
    private int UserId = -1;

    protected override async Task OnInitializedAsync()
    {
        FetchNotesData();
        FetchCategoriesData();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !checkedLoggedIn)
        {
            // Check if the user is not logged in
            if (!AuthService.IsLoggedIn())
            {
                // User is not logged in, redirect to login page
                NavigationManager.NavigateTo("/");
            }
            checkedLoggedIn = true;
        }
    }

    void HandleNew()
    {
        NavigationManager.NavigateTo("/NewNote");
    }

    void ToggleAscDesc()
    {
        showAscDesc = !showAscDesc;
        HandleSort();
    }

    async void FetchNotesData()
    {
        errorNotes = "";
        usersNotes = await noteService.GetAllNotes();
    }

    async void FetchCategoriesData()
    {
        errorCategories = "";
        categories = await taskTypeService.GetAllTaskTypes();
    }

    void HandleSort()
    {
        sortOrder = sortOrder == "asc" ? "desc" : "asc";
        // Sort usersNotes based on sortOrder
    }

    void HandleFilter(TaskType category)
    {
        currentCategory = category; // Update the current category or filter
        usersNotes = category.taskTypeDescription == "All" ? usersNotes : usersNotes.Where(note => note.taskTypeId == category.taskTypeId).ToList();
        StateHasChanged();
    }

    string GetButtonClass(TaskType category)
    {
        return category.taskTypeDescription == currentCategory.taskTypeDescription ? "categories-button clicked" : "categories-button";
    }

}
