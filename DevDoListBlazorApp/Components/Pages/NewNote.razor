@page "/newNote"
@using DevDoListBlazorApp.Models
@using DevDoListBlazorApp.Services
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject NoteService NoteService
@inject StatusService StatusService
@inject TaskTypeService TaskTypeService
@inject AuthService AuthService

<div class="new-page">

    <div class="note-container">
        <div class="side-panel">
        </div>
        <div class="input-container-note">

            <div class="title-container">
                <input class="input-title" @bind="title" />
                <div class="task-type-container">
                    <select class="input-status" @bind="statusId">
                        <option value="-1">Select Status</option>
                        @foreach (var status in statuses)
                        {
                            <option value="@status.statusId">@status.statusType</option>
                        }
                    </select>
                </div>
            </div>

            <div class="date-container">
                <div class="input-container-short">
                    <label>Task Type:</label>
                    <select class="input" @bind="taskTypeId">
                        <option value="-1">Select Task Type</option>
                        @foreach (var taskType in taskTypes)
                        {
                            <option value="@taskType.taskTypeId">@taskType.taskTypeDescription</option>
                        }
                    </select>
                </div>
            </div>

            <div class="input-container">
                <label>Description:</label>
                <textarea class="input-text-area" @bind="description"></textarea>
            </div>

            <div class="date-container">
                <div class="input-container-short">
                    <label>Created Date:</label>
                    <input class="input" readonly type="date" @bind="createdDate" />
                </div>
                <div class="input-container-short">
                    <label>Due Date:</label>
                    <input class="input" type="date" @bind="dueDate" />
                </div>
            </div>

            <div class="buttons-container">
                <div class="button">
                    <button class="delete-button" @onclick="SaveNote">Save</button>
                </div>
            </div>

        </div>
    </div>

</div>

@code {
    private Note currNote = new Note();
    string title = "Untitled";
    string saveErrorMsg = "";
    string description = "Enter Note Description Here ...";
    DateTime dueDate = DateTime.Now;
    DateTime createdDate = DateTime.Now;
    int userId = 1;
    int statusId = 1;
    int taskTypeId = 1;
    private string _accessToken = string.Empty;
    List<Status> statuses = new();
    List<TaskType> taskTypes = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!await AuthService.IsLoggedIn())
            {
                NavigationManager.NavigateTo("/");
            }

            await GetDropDownData();
            StateHasChanged();
        }
    }

    private async Task GetDropDownData()
    {
        taskTypes = await TaskTypeService.GetAllTaskTypes();
        statuses = await StatusService.GetAllStatuses();
    }

    private async Task SaveNote()
    {
            currNote = new Note
                {
                    title = title,
                    description = description,
                    dueDate = dueDate,
                    statusId = statusId,
                    taskTypeId = taskTypeId,
                };
            var newNote = await NoteService.CreateNote(currNote);
            if (newNote != null)
            {
                StateHasChanged();
                NavigationManager.NavigateTo("/dashboard");
            }
    }
}
