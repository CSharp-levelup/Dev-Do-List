@page "/newNote"
@using DevDoListBlazorApp.Models
@using DevDoListBlazorApp.Services

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject NoteService NoteService

<div class="new-page">
    <div class="input-container-note">

        <div class="title-container">
            <input class="input-title" @bind="_title" />
        </div>

        <div class="date-container">
            <div class="status-container">
                <label>Status:</label>
                <select class="input" @bind="statusId">
                    <option value="-1">Select Status</option>
                    <option value="1">Not Started</option>
                    <option value="2">In Progress</option>
                </select>
            </div>
            <div class="task-type-container">
                <label>Task Type:</label>
                <select class="input" @bind="taskTypeId">
                    <option value="-1">Select Task Type</option>
                    <option value="1">Jira Ticket</option>
                    <option value="2">Pull Request</option>
                </select>
            </div>
        </div>
        
        <div class="input-container">
            <label>Description:</label>
            <textarea class="input-text-area" @bind="description"></textarea>
        </div>

        <div class="date-container">
            <div class="input-container-short">
                <label>Due Date:</label>
                <input class="input" type="date" @bind="dueDate" />
            </div>
        </div>

        <div class="button-container">
            <button class="save-button" @onclick="SaveNote">Save</button>
            <div class="error-message">@saveErrorMsg</div>
        </div>
       
    </div>
</div>

@code {
    private string mode = "";
    private Note currNote = new Note();
    string category = "None";
    string _title = "Title";
    string saveErrorMsg = "";
    string description = "";
    DateTime dueDate = DateTime.Now; // Set default due date
    int userId = 1; // Non-admin user
    int statusId = -1;
    int taskTypeId = -1;
    private string _accessToken = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender) // Redirects to login page if they do not have a token
    {
        if (firstRender)
        {
            // Check if the user is not logged in

            if (!AuthService.IsLoggedIn())
            {
                // User is not logged in, redirect to login page
                NavigationManager.NavigateTo("/");
            }

        }
        // Fetch Status Data + Populate model
        // Fetch Task Type Data + Populate mode
    }

    private async Task SaveNote()
    {
        Console.WriteLine("title: " + _title);
        // Call service method to save note
            currNote = new Note
                {
                    title = _title,
                    description = description,
                    dueDate = dueDate,
                    statusId = statusId,
                    taskTypeId = taskTypeId,
                };
            Console.WriteLine("Note: " + currNote);
            var newNote = await NoteService.CreateNote(currNote);
            if (newNote == null)
            {
                throw new Exception("Could not create new note");
            } else
            {
                StateHasChanged();
                //Reset fields after successful save
                //nav back to home if successfull
                NavigationManager.NavigateTo("/dashboard");
            }
            
        
    }
}
