@page "/viewNote/{task_id}"

@rendermode InteractiveServer
@using DevDoListBlazorApp.Models
@using DevDoListBlazorApp.Services
@using DevDoListBlazorApp.Components.Shared
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Collections.Generic
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="new-page">
    <div class="input-container-note">

        <div class="title-container">
            <input class="input-title" @bind="title" />
        </div>

        <div class="date-container">
            <div class="status-container">
                <label>Status:</label>
                <select class="input" @bind="statusId">
                    <option value="-1">Select Status</option>
                    <option value="1">Not Started</option>
                    <option value="2">In Progress</option>
                </select>
            </div>
            <div class="task-type-container">
                <label>Task Type:</label>
                <select class="input" @bind="taskTypeId">
                    <option value="-1">Select Task Type</option>
                    <option value="1">Jira Ticket</option>
                    <option value="2">Pull Request</option>
                </select>
            </div>
        </div>
        
        <div class="input-container">
            <label>Description:</label>
            <textarea class="input-text-area" @bind="description"></textarea>
        </div>

        <div class="date-container">
            <div class="input-container-short">
                <label>Due Date:</label>
                <input class="input" type="date" @bind="dueDate" />
            </div>
        </div>

        <div class="buttons-container">

            <div class="button">
                <button class="save-button" @onclick="UpdateNote">Update</button>
            </div>
            <div class="button">
                <button class="delete-button" @onclick="DeleteNote">Delete</button>
            </div>
            
        </div>
       
    </div>
</div>

@code {
    [Parameter] public string task_id { get; set; }
    private Note currNote = new Note();
    private int taskId = 0;
    string saveErrorMsg = "Could not save note";
    string deleteErrorMsg = "Could not delete note";
    string category = "None";
    string title = "";
    string description = "";
    DateTime dueDate = new();
    int userId = -1;
    int statusId = -1;
    int taskTypeId = -1;
    private string _accessToken = string.Empty;
    private NoteService? notesService;
    private bool flag = true;  

    protected override async Task OnAfterRenderAsync(bool firstRender) // Redirects to login page if they do not have a token
    {
        if (firstRender)
        {
            var jwtToken = await ProtectedSessionStorage.GetAsync<string>("accessToken");
            if (string.IsNullOrEmpty(jwtToken.Value))
            {
                NavigationManager.NavigateTo("/");
            }
        }

        taskId = int.Parse(task_id);
        GetNote();
        StateHasChanged();
        // Fetch Status Data + Populate model
        // Fetch Task Type Data + Populate mode
    }

    private async Task UpdateNote()
    {
        var jwtToken = await ProtectedSessionStorage.GetAsync<string>("accessToken");
        _accessToken = jwtToken.Value;
        string? accessToken = this._accessToken;
        if (accessToken != null)
        {
            notesService = new NoteService(accessToken);
            currNote = new Note
                {
                    title = title,
                    description = description,
                    dueDate = dueDate,
                    statusId = statusId,
                    taskTypeId = taskTypeId,
                    userId = userId
                };
            Note newNote = await notesService.UpdateNote(currNote, taskId);
            if (newNote == null)
            {
                throw new Exception("Could not update note");
            } else
            {
                NavigationManager.NavigateTo("/dashboard");
            }

        }
    }

    private async void GetNote()
    {
        var jwtToken = await ProtectedSessionStorage.GetAsync<string>("accessToken");
        _accessToken = jwtToken.Value;
        string? accessToken = this._accessToken;
        if (accessToken != null)
        {
            notesService = new NoteService(accessToken);
            currNote = await notesService.GetNoteById(taskId);
        }

        if (currNote != null)
        {
            title = currNote.title;
            description = currNote.description;
            dueDate = currNote.dueDate;
            userId = currNote.userId;
            statusId = currNote.statusId;
            taskTypeId = currNote.taskTypeId;
        }
    }

    private async void DeleteNote()
    {
        if (currNote is null) return;
        bool ans = await notesService.DeleteNote(currNote.taskId);
        NavigationManager.NavigateTo("/dashboard", true);
    }
}
